Subject: Enable qcat and friends as qlzip1/qlunzip1/qlzcat1
Author: Walter Doekes <wjdoekes+qpress@osso.nl>
Date: 2019-07-01
Forwarded: no

(We'd rather have 300MB/s compress and 300MB/s decompress (and seemingly
better compression) -- for level 1 -- than 30MB/s compression and
500MB/s decompression -- for level 3. (According to the homepage.))

Added the compression-level as binary-name suffix, because the levels
are incompatible with each other.

Comparing to other common compression algorithms, an unscientific
test with a 174MB hard-to-compress tar as test data, gives us:

* qlzip1:  1x time 117M (+40%) size
* gzip:   13x time 105M (+25%) size
* bzip2:  58x time  99M (+20%) size
* xz:    128x time  83M (smallest) size

--- a/makefile	2019-06-30 22:22:03.717789416 +0200
+++ b/Makefile	2019-07-01 00:30:56.435534848 +0200
@@ -1,2 +1,21 @@
-g++:	qpress.cpp aio.cpp quicklz.c utilities.cpp
-	g++ -O3 -o qpress qpress.cpp aio.cpp quicklz.c utilities.cpp -lpthread
\ No newline at end of file
+ALL_FLAGS = -DQLZ_MEMORY_SAFE
+QPRESS_FLAGS = $(ALL_FLAGS)
+QLZIP_LEVEL = 1
+QLZIP_FLAGS = $(ALL_FLAGS) -DQLZ_COMPRESSION_LEVEL=$(QLZIP_LEVEL) -DQLZ_STREAMING_BUFFER=1048576
+
+.PHONY: all clean
+all: qpress qlzcat$(QLZIP_LEVEL) qlzip$(QLZIP_LEVEL) qlunzip$(QLZIP_LEVEL)
+clean:
+	$(RM) qpress qlzcat$(QLZIP_LEVEL) qlzip$(QLZIP_LEVEL) qlunzip$(QLZIP_LEVEL)
+
+qpress: qpress.cpp aio.cpp quicklz.c utilities.cpp
+	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(QPRESS_FLAGS) -o $@ $^ $(LDFLAGS) -lpthread
+
+qlzip$(QLZIP_LEVEL): qzip.c quicklz.c
+	$(CC) $(CFLAGS) $(CPPFLAGS) $(QLZIP_FLAGS) -o $@ $^ $(LDFLAGS)
+
+qlunzip$(QLZIP_LEVEL): qlzip$(QLZIP_LEVEL)
+	ln -s qlzip$(QLZIP_LEVEL) qlunzip$(QLZIP_LEVEL)
+
+qlzcat$(QLZIP_LEVEL): qlzip$(QLZIP_LEVEL)
+	ln -s qlzip$(QLZIP_LEVEL) qlzcat$(QLZIP_LEVEL)
diff --git a/qzip.c b/qzip.c
index f6f1499..6332e97 100755
--- a/qzip.c
+++ b/qzip.c
@@ -23,22 +23,40 @@
 #define true 1
 #define false 0
 
+// https://stackoverflow.com/a/5459929 -- by Lindydancer
+#define STR_HELPER(x) #x
+#define STR(x) STR_HELPER(x)
+
+// add compression level to both suffix and app name, because they're mutually
+// incompatible
+#define LVL STR(QLZ_COMPRESSION_LEVEL)
+#define prog_qlunzip "qlunzip" LVL
+#define prog_qlzcat "qlzcat" LVL
+#define prog_qlzip "qlzip" LVL
+#define SUFFIX ".qz" LVL
+#if QLZ_COMPRESSION_LEVEL == 1 || QLZ_COMPRESSION_LEVEL == 2 || \
+    QLZ_COMPRESSION_LEVEL == 3  // level must be in {1,2,3}
+#define SUFLEN 4
+#endif
+
 static char doc[] =
-       "qzip/qunzip - A gzip-like program which uses quicklz compression.\n"
+       prog_qlzip "/" prog_qlunzip
+       " - A gzip-like program which uses quicklz level " LVL " compression.\n"
        "\n"
        "Examples:\n"
-       "  cat <file> | qzip > outfile.qz \n"
-       "  qunzip file.qz\n"
-       "  qzip file\n"
-       "  qcat file.qz\n";
+       "  cat <file> | " prog_qlzip " > outfile" SUFFIX "\n"
+       "  " prog_qlunzip " file" SUFFIX "\n"
+       "  " prog_qlzip " file\n"
+       "  " prog_qlzcat " file" SUFFIX "\n";
 
 static char* progname;
 
-int stream_compress(FILE *ifile, FILE *ofile)
+void stream_compress(FILE *ifile, FILE *ofile)
 {
     char *file_data, *compressed;
     size_t d, c, fd_size, compressed_size;
-    qlz_state_compress *state_compress = (qlz_state_compress *)malloc(sizeof(qlz_state_compress));
+    qlz_state_compress *state_compress =
+        (qlz_state_compress *)malloc(sizeof(qlz_state_compress));
 
     fd_size = MAX_BUF_SIZE;
     file_data = (char*) malloc(fd_size);
@@ -56,22 +74,25 @@ int stream_compress(FILE *ifile, FILE *ofile)
     {
         c = qlz_compress(file_data, compressed, d, state_compress);
 
-        // the buffer "compressed" now contains c bytes which we could have sent directly to a
-        // decompressing site for decompression
-        fwrite(compressed, c, 1, ofile);
+        // the buffer "compressed" now contains c bytes which we could have
+        // sent directly to a decompressing site for decompression
+        if (fwrite(compressed, 1, c, ofile) != c) {
+            fprintf(stderr, "short write\n");
+            exit(1);
+        }
     }
 
     free(state_compress);
     free(compressed);
     free(file_data);
-    return 0;
 }
 
-int stream_decompress(FILE *ifile, FILE *ofile)
+void stream_decompress(FILE *ifile, FILE *ofile)
 {
     char *file_data, *decompressed;
     size_t d, c, dc, fd_size, d_size;
-    qlz_state_decompress *state_decompress = (qlz_state_decompress *)malloc(sizeof(qlz_state_decompress));
+    qlz_state_decompress *state_decompress =
+        (qlz_state_decompress *)malloc(sizeof(qlz_state_decompress));
 
     // a compressed packet can be at most MAX_BUF_SIZE + BUF_BUFFER bytes if it
     // was compressed with this program.
@@ -82,8 +103,8 @@ int stream_decompress(FILE *ifile, FILE *ofile)
     d_size = fd_size - BUF_BUFFER;
     decompressed = (char*) malloc(d_size);
 
-    // allocate and initially zero out the scratch buffer. After this, make sure it is
-    // preserved across calls and never modified manually
+    // allocate and initially zero out the scratch buffer. After this, make
+    // sure it is preserved across calls and never modified manually
     memset(state_decompress, 0, sizeof(qlz_state_decompress));
 
     // read 9-byte header to find the size of the entire compressed packet, and
@@ -107,19 +128,24 @@ int stream_decompress(FILE *ifile, FILE *ofile)
             decompressed = (char*)malloc(d_size);
         }
 
-        fread(file_data + 9, 1, c - 9, ifile);
+        if (fread(file_data + 9, 1, c - 9, ifile) != (c - 9)) {
+            fprintf(stderr, "short read\n");
+            exit(1);
+        }
         d = qlz_decompress(file_data, decompressed, state_decompress);
-        fwrite(decompressed, d, 1, ofile);
+        if (fwrite(decompressed, 1, d, ofile) != d) {
+            fprintf(stderr, "short write\n");
+            exit(1);
+        }
     }
 
     free(decompressed);
     free(state_decompress);
     free(file_data);
-    return 0;
 }
 
 void usage() {
-    fprintf(stderr, doc);
+    fprintf(stderr, "%s", doc);
     exit(1);
 }
 
@@ -139,7 +165,7 @@ void abort_if_exists(char *fn) {
 void move_to_final(char *tmp, char *dst) {
     abort_if_exists(dst);
     if (rename(tmp, dst) < 0) {
-        fprintf(stderr, "%s:Unable to rename output file '%s'",
+        fprintf(stderr, "%s: Unable to rename output file '%s'",
                 progname, dst);
         perror(progname);
         exit(2);
@@ -162,13 +188,16 @@ int main(int argc, char* argv[])
         progname = progname_iter;
     }
 
-    if (strcmp(progname, "qzip") == 0) {
+    if (strcmp(progname, "qzip") == 0 ||  // original name
+            strcmp(progname, prog_qlzip) == 0) { // new name
         do_compress = true;
     }
-    else if (strcmp(progname, "qunzip") == 0) {
+    else if (strcmp(progname, "qunzip") == 0 || // original name
+            strcmp(progname, prog_qlunzip) == 0) {  // new name
         do_compress = false;
     }
-    else if (strcmp(progname, "qcat") == 0) {
+    else if (strcmp(progname, "qcat") == 0 ||  // original name
+            strcmp(progname, prog_qlzcat) == 0) {  // new name
         do_compress = false;
         to_stdout = true;
     }
@@ -199,8 +228,10 @@ int main(int argc, char* argv[])
         if (do_compress) {
             // Compress
             if (argc > 1) {
-                sprintf(fn_buffer, "%s.qz", argv[file_index]);
-                sprintf(tmp_fn_buffer, "%s.qz.%d", argv[file_index], getpid());
+                snprintf(fn_buffer, sizeof(fn_buffer),
+                    "%s" SUFFIX, argv[file_index]);
+                snprintf(tmp_fn_buffer, sizeof(tmp_fn_buffer),
+                    "%s" SUFFIX ".%d", argv[file_index], getpid());
 
                 abort_if_exists(fn_buffer);
                 abort_if_exists(tmp_fn_buffer);
@@ -224,20 +255,23 @@ int main(int argc, char* argv[])
                 bool err = false;
                 if (strlen(argv[file_index]) < 4) err = true;
                 if (!err) {
-                    strcpy(tmp_fn_buffer, argv[file_index] + strlen(argv[file_index]) - 3);
-                    if (strcmp(tmp_fn_buffer, ".qz") != 0) {
+                    strcpy(tmp_fn_buffer,
+                        argv[file_index] + strlen(argv[file_index]) - SUFLEN);
+                    if (strcmp(tmp_fn_buffer, SUFFIX) != 0) {
                         err = true;
                     }
                 }
                 if (err) {
-                    fprintf(stderr, "%s: File does not end in '.qz': '%s'\n",
-                            progname, argv[file_index]);
+                    fprintf(stderr, "%s: File does not end in '" SUFFIX
+                        "': '%s'\n", progname, argv[file_index]);
                     exit(1);
                 }
 
                 if (! to_stdout) {
-                    strncpy(fn_buffer, argv[file_index], strlen(argv[file_index]) - 3);
-                    sprintf(tmp_fn_buffer, "%s.%d", fn_buffer, getpid());
+                    strncpy(fn_buffer, argv[file_index],
+                        strlen(argv[file_index]) - SUFLEN);
+                    snprintf(tmp_fn_buffer, sizeof(tmp_fn_buffer),
+                        "%s.%d", fn_buffer, getpid());
                     abort_if_exists(fn_buffer);
                 }
 
@@ -288,4 +322,3 @@ int main(int argc, char* argv[])
     }
     exit(0);
 }
-
