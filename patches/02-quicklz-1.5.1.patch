Subject: Update quicklz.[ch] to 1.5.1 BETA 7
Author: Walter Doekes <wjdoekes+qpress@osso.nl>
Date: 2019-07-01
Forwarded: no

In qpress-1.1, the library version used was 1.4.1 final.

Using the newest version makes integration with the qzip.c easier. And
according to the homepage, it's even faster. Although we did not notice
any speed improvements for compression level 1. (I.e. using an older
qpress is not a problem.)

Updating levels.c was a bit of a pain.

--- a/qpress.cpp.orig	2020-08-21 09:31:37.651457980 +0000
+++ b/qpress.cpp	2020-08-21 09:31:57.111572719 +0000
@@ -407,7 +407,7 @@ void print_usage()
     "files will be concatenated in a continuous stream.\n\n"
     "It's recommended to use .qp as filename suffix.\n";
     PRINT(FATAL_ERROR, "qpress 1.1 - Copyright 2006-2010 Lasse Reinhold - www.quicklz.com\n");
-    PRINT(FATAL_ERROR, "Using QuickLZ 1.4.1 compression library\n");
+    PRINT(FATAL_ERROR, "Using QuickLZ 1.5.1 BETA 7 compression library\n");
  
 	PRINT(FATAL_ERROR, "Compiled for: ");
 	#ifdef WINDOWS
--- a/levels.c	2019-06-30 23:32:53.564889101 +0200
+++ b/levels.c	2019-07-01 00:30:03.171428237 +0200
@@ -16,187 +16,259 @@ Very dirty method to offer runtime selec
 //#define QLZ_STREAMING_BUFFER 100000
 //#define QLZ_STREAMING_BUFFER 1000000
 
-#define QLZ_MEMORY_SAFE
-
 // ---------------------------------------
-#define fast_read FAST_READ_1
-#define fast_write FAST_WRITE_1
-#define hash_func HASH_FUNC_1
-#define memcpy_up MEMCPY_UP_1
-#define qlz_compress_core QLZ_COMPRESS_CORE_1
-#define qlz_decompress_core QLZ_DECOMPRESS_CORE_1
-#define qlz_decompress QLZ_DECOMPRESS_1
-#define qlz_compress QLZ_COMPRESS_1
-#define qlz_size_decompressed QLZ_SIZE_DECOMPRESSED_1
-#define qlz_size_compressed QLZ_SIZE_COMPRESSED_1
-#define qlz_get_setting QLZ_GET_SETTING_1
-#define update_hash_upto UPDATE_HASH_UPTO_1
-#define update_hash UPDATE_HASH_1
-#define qlz_hash_entry QLZ_HASH_ENTRY_1
-#define reset_state RESET_STATE_1
-#define qlz_hash_compress QLZ_HASH_COMPRESS_1
-#define qlz_hash_decompress QLZ_HASH_DECOMPRESS_1
+#define fast_read L_fast_read_1
+#define fast_write L_fast_write_1
+#define hashat L_hashat_1
+#define hash_func L_hash_func_1
+#define memcpy_up L_memcpy_up_1
+#define qlz_compress L_qlz_compress_1
+#define qlz_compress_core L_qlz_compress_core_1
+#define qlz_decompress L_qlz_decompress_1
+#define qlz_decompress_core L_qlz_decompress_core_1
+#define qlz_get_setting L_qlz_get_setting_1
+#define qlz_size_compressed L_qlz_size_compressed_1
+#define qlz_size_decompressed L_qlz_size_decompressed_1
+#define qlz_size_header L_qlz_size_header_1
+#define reset_table_compress L_reset_table_compress_1
+#define reset_table_decompress L_reset_table_decompress_1
+#define same L_same_1
+#define update_hash L_update_hash_1
+#define update_hash_upto L_update_hash_upto_1
+
+#define qlz_hash_compress L_qlz_hash_compress_1
+#define qlz_hash_decompress L_qlz_hash_decompress_1
+#define qlz_state_compress L_qlz_state_compress_1
+#define qlz_state_decompress L_qlz_state_decompress_1
 
 #define QLZ_COMPRESSION_LEVEL 1
 
 #include "quicklz.c"
 
 size_t QLZ_SCRATCH_COMPRESS_1(void)
 {
-    return QLZ_SCRATCH_COMPRESS;
+    return sizeof(qlz_state_compress);
 }
 size_t QLZ_SCRATCH_DECOMPRESS_1(void)    
 {
-    return QLZ_SCRATCH_DECOMPRESS;
+    return sizeof(qlz_state_decompress);
 }
 
-#undef X86X64
-#undef QLZ_HEADER
 #undef QLZ_SCRATCH_COMPRESS
 #undef QLZ_SCRATCH_DECOMPRESS
+#undef QLZ_COMPRESSION_LEVEL
+#undef QLZ_HASH_VALUES
+#undef QLZ_HEADER
+#undef QLZ_POINTERS
+#undef QLZ_PTR_64
+#undef QLZ_VERSION_MAJOR
+#undef QLZ_VERSION_MINOR
+#undef QLZ_VERSION_REVISION
+#undef CAST
+#undef CWORD_LEN
+#undef MINOFFSET
+#undef OFFSET_BASE
+#undef UNCOMPRESSED_END
+#undef UNCONDITIONAL_MATCHLEN_COMPRESSOR
+#undef UNCONDITIONAL_MATCHLEN_DECOMPRESSOR
+#undef X86X64
+
 #undef fast_read
 #undef fast_write
+#undef hashat
 #undef hash_func
 #undef memcpy_up
+#undef qlz_compress
 #undef qlz_compress_core
-#undef qlz_decompress_core
 #undef qlz_decompress
-#undef qlz_compress
-#undef qlz_size_decompressed
-#undef qlz_size_compressed
+#undef qlz_decompress_core
 #undef qlz_get_setting
-#undef QLZ_COMPRESSION_LEVEL
-#undef QLZ_POINTERS
-#undef QLZ_HASH_VALUES
-#undef update_hash_upto 
-#undef update_hash 
-#undef qlz_hash_entry
-#undef reset_state
+#undef qlz_size_compressed
+#undef qlz_size_decompressed
+#undef qlz_size_header
+#undef reset_table_compress
+#undef reset_table_decompress
+#undef same
+#undef update_hash
+#undef update_hash_upto
+
 #undef qlz_hash_compress
 #undef qlz_hash_decompress
+#undef qlz_state_compress
+#undef qlz_state_decompress
 
 // ---------------------------------------
-#define fast_read FAST_READ_2
-#define fast_write FAST_WRITE_2
-#define hash_func HASH_FUNC_2
-#define memcpy_up MEMCPY_UP_2
-#define qlz_compress_core QLZ_COMPRESS_CORE_2
-#define qlz_decompress_core QLZ_DECOMPRESS_CORE_2
-#define qlz_decompress QLZ_DECOMPRESS_2
-#define qlz_compress QLZ_COMPRESS_2
-#define qlz_size_decompressed QLZ_SIZE_DECOMPRESSED_2
-#define qlz_size_compressed QLZ_SIZE_COMPRESSED_2
-#define qlz_get_setting QLZ_GET_SETTING_2
-#define update_hash_upto UPDATE_HASH_UPTO_2
-#define update_hash UPDATE_HASH_2
-#define qlz_hash_entry QLZ_HASH_ENTRY_2
-#define reset_state RESET_STATE_2
-#define qlz_hash_compress QLZ_HASH_COMPRESS_2
-#define qlz_hash_decompress QLZ_HASH_DECOMPRESS_2
+#define fast_read L_fast_read_2
+#define fast_write L_fast_write_2
+#define hashat L_hashat_2
+#define hash_func L_hash_func_2
+#define memcpy_up L_memcpy_up_2
+#define qlz_compress L_qlz_compress_2
+#define qlz_compress_core L_qlz_compress_core_2
+#define qlz_decompress L_qlz_decompress_2
+#define qlz_decompress_core L_qlz_decompress_core_2
+#define qlz_get_setting L_qlz_get_setting_2
+#define qlz_size_compressed L_qlz_size_compressed_2
+#define qlz_size_decompressed L_qlz_size_decompressed_2
+#define qlz_size_header L_qlz_size_header_2
+#define reset_table_compress L_reset_table_compress_2
+#define reset_table_decompress L_reset_table_decompress_2
+#define same L_same_2
+#define update_hash L_update_hash_2
+#define update_hash_upto L_update_hash_upto_2
+
+#define qlz_hash_compress L_qlz_hash_compress_2
+#define qlz_hash_decompress L_qlz_hash_decompress_2
+#define qlz_state_compress L_qlz_state_compress_2
+#define qlz_state_decompress L_qlz_state_decompress_2
 
 #define QLZ_COMPRESSION_LEVEL 2
 
 #include "quicklz.c"
 
 size_t QLZ_SCRATCH_COMPRESS_2(void)
 {
-    return QLZ_SCRATCH_COMPRESS;
+    return sizeof(qlz_state_compress);
 }
 size_t QLZ_SCRATCH_DECOMPRESS_2(void)
 {
-    return QLZ_SCRATCH_DECOMPRESS;
+    return sizeof(qlz_state_decompress);
 }
 
-#undef X86X64
-#undef QLZ_HEADER
 #undef QLZ_SCRATCH_COMPRESS
 #undef QLZ_SCRATCH_DECOMPRESS
+#undef QLZ_COMPRESSION_LEVEL
+#undef QLZ_HASH_VALUES
+#undef QLZ_HEADER
+#undef QLZ_POINTERS
+#undef QLZ_PTR_64
+#undef QLZ_VERSION_MAJOR
+#undef QLZ_VERSION_MINOR
+#undef QLZ_VERSION_REVISION
+#undef CAST
+#undef CWORD_LEN
+#undef MINOFFSET
+#undef OFFSET_BASE
+#undef UNCOMPRESSED_END
+#undef UNCONDITIONAL_MATCHLEN_COMPRESSOR
+#undef UNCONDITIONAL_MATCHLEN_DECOMPRESSOR
+#undef X86X64
+
 #undef fast_read
 #undef fast_write
+#undef hashat
 #undef hash_func
 #undef memcpy_up
+#undef qlz_compress
 #undef qlz_compress_core
-#undef qlz_decompress_core
 #undef qlz_decompress
-#undef qlz_compress
-#undef qlz_size_decompressed
-#undef qlz_size_compressed
+#undef qlz_decompress_core
 #undef qlz_get_setting
-#undef QLZ_COMPRESSION_LEVEL
-#undef QLZ_POINTERS
-#undef QLZ_HASH_VALUES
-#undef update_hash_upto 
-#undef update_hash 
-#undef qlz_hash_entry
-#undef reset_state
+#undef qlz_size_compressed
+#undef qlz_size_decompressed
+#undef qlz_size_header
+#undef reset_table_compress
+#undef reset_table_decompress
+#undef same
+#undef update_hash
+#undef update_hash_upto
+
 #undef qlz_hash_compress
 #undef qlz_hash_decompress
+#undef qlz_state_compress
+#undef qlz_state_decompress
 
 // ---------------------------------------
-#define fast_read FAST_READ_3
-#define fast_write FAST_WRITE_3
-#define hash_func HASH_FUNC_3
-#define memcpy_up MEMCPY_UP_3
-#define qlz_compress_core QLZ_COMPRESS_CORE_3
-#define qlz_decompress_core QLZ_DECOMPRESS_CORE_3
-#define qlz_decompress QLZ_DECOMPRESS_3
-#define qlz_compress QLZ_COMPRESS_3
-#define qlz_size_decompressed QLZ_SIZE_DECOMPRESSED_3
-#define qlz_size_compressed QLZ_SIZE_COMPRESSED_3
-#define qlz_get_setting QLZ_GET_SETTING_3
-#define update_hash_upto UPDATE_HASH_UPTO_3
-#define update_hash UPDATE_HASH_3
-#define qlz_hash_entry QLZ_HASH_ENTRY_3
-#define reset_state RESET_STATE_3
-#define qlz_hash_compress QLZ_HASH_COMPRESS_3
-#define qlz_hash_decompress QLZ_HASH_DECOMPRESS_3
+#define fast_read L_fast_read_3
+#define fast_write L_fast_write_3
+#define hashat L_hashat_3
+#define hash_func L_hash_func_3
+#define memcpy_up L_memcpy_up_3
+#define qlz_compress L_qlz_compress_3
+#define qlz_compress_core L_qlz_compress_core_3
+#define qlz_decompress L_qlz_decompress_3
+#define qlz_decompress_core L_qlz_decompress_core_3
+#define qlz_get_setting L_qlz_get_setting_3
+#define qlz_size_compressed L_qlz_size_compressed_3
+#define qlz_size_decompressed L_qlz_size_decompressed_3
+#define qlz_size_header L_qlz_size_header_3
+#define reset_table_compress L_reset_table_compress_3
+#define reset_table_decompress L_reset_table_decompress_3
+#define same L_same_3
+#define update_hash L_update_hash_3
+#define update_hash_upto L_update_hash_upto_3
+
+#define qlz_hash_compress L_qlz_hash_compress_3
+#define qlz_hash_decompress L_qlz_hash_decompress_3
+#define qlz_state_compress L_qlz_state_compress_3
+#define qlz_state_decompress L_qlz_state_decompress_3
 
 #define QLZ_COMPRESSION_LEVEL 3
 
 #include "quicklz.c"
 
 size_t QLZ_SCRATCH_COMPRESS_3(void)
 {
-    return QLZ_SCRATCH_COMPRESS;
+    return sizeof(qlz_state_compress);
 }
 size_t QLZ_SCRATCH_DECOMPRESS_3(void)
 {
-    return QLZ_SCRATCH_DECOMPRESS;
+    return sizeof(qlz_state_decompress);
 }
 
 size_t QLZ_SIZE_COMPRESSED(char *source)
 {
-    return QLZ_SIZE_COMPRESSED_3(source);
+    return L_qlz_size_compressed_3(source);
 }
 
 size_t QLZ_SIZE_DECOMPRESSED(char *source)
 {
-    return QLZ_SIZE_DECOMPRESSED_3(source);
+    return L_qlz_size_decompressed_3(source);
 }
 
-#undef QLZ_HEADER
 #undef QLZ_SCRATCH_COMPRESS
 #undef QLZ_SCRATCH_DECOMPRESS
+#undef QLZ_COMPRESSION_LEVEL
+#undef QLZ_HASH_VALUES
+#undef QLZ_HEADER
+#undef QLZ_POINTERS
+#undef QLZ_PTR_64
+#undef QLZ_VERSION_MAJOR
+#undef QLZ_VERSION_MINOR
+#undef QLZ_VERSION_REVISION
+#undef CAST
+#undef CWORD_LEN
+#undef MINOFFSET
+#undef OFFSET_BASE
+#undef UNCOMPRESSED_END
+#undef UNCONDITIONAL_MATCHLEN_COMPRESSOR
+#undef UNCONDITIONAL_MATCHLEN_DECOMPRESSOR
+#undef X86X64
+
 #undef fast_read
 #undef fast_write
+#undef hashat
 #undef hash_func
 #undef memcpy_up
+#undef qlz_compress
 #undef qlz_compress_core
-#undef qlz_decompress_core
 #undef qlz_decompress
-#undef qlz_compress
-#undef qlz_size_decompressed
-#undef qlz_size_compressed
+#undef qlz_decompress_core
 #undef qlz_get_setting
-#undef QLZ_COMPRESSION_LEVEL
-#undef QLZ_POINTERS
-#undef QLZ_HASH_VALUES
-#undef update_hash_upto 
-#undef update_hash 
-#undef qlz_hash_entry
-#undef reset_state
+#undef qlz_size_compressed
+#undef qlz_size_decompressed
+#undef qlz_size_header
+#undef reset_table_compress
+#undef reset_table_decompress
+#undef same
+#undef update_hash
+#undef update_hash_upto
+
 #undef qlz_hash_compress
 #undef qlz_hash_decompress
+#undef qlz_state_compress
+#undef qlz_state_decompress
+
 
 static size_t max2(size_t a, size_t b) 
 {
@@ -217,11 +292,11 @@ size_t QLZ_SCRATCH_DECOMPRESS(void)
 size_t QLZ_COMPRESS(const void *source, char *destination, size_t size, unsigned int level, char *scratch)
 {
     if(level == 1)
-        return QLZ_COMPRESS_1(source, destination, size, scratch);
+        return L_qlz_compress_1(source, destination, size, (L_qlz_state_compress_1*)scratch);
     else if(level == 2)
-        return QLZ_COMPRESS_2(source, destination, size, scratch);
+        return L_qlz_compress_2(source, destination, size, (L_qlz_state_compress_2*)scratch);
     else if(level == 3)
-        return QLZ_COMPRESS_3(source, destination, size, scratch);
+        return L_qlz_compress_3(source, destination, size, (L_qlz_state_compress_3*)scratch);
     else
         return 0;
 }
@@ -230,11 +305,11 @@ size_t QLZ_DECOMPRESS(const char *source
     int level = ((source[0] >> 2) & 3);
 
     if(level == 1)
-        return QLZ_DECOMPRESS_1(source, destination, scratch);
+        return L_qlz_decompress_1(source, destination, (L_qlz_state_decompress_1*)scratch);
     else if(level == 2)
-        return QLZ_DECOMPRESS_2(source, destination, scratch);
+        return L_qlz_decompress_2(source, destination, (L_qlz_state_decompress_2*)scratch);
     else if(level == 3)
-        return QLZ_DECOMPRESS_3(source, destination, scratch);
+        return L_qlz_decompress_3(source, destination, (L_qlz_state_decompress_3*)scratch);
     else
         return 0;
 }
--- a/quicklz.h	2010-04-20 07:26:39.000000000 +0200
+++ b/quicklz.h	2011-10-08 11:27:52.000000000 +0200
@@ -1,94 +1,142 @@
-#ifndef QLZ_HEADER
-#define QLZ_HEADER
-
-// Fast data compression library
-// Copyright (C) 2006-2009 Lasse Mikkel Reinhold
-// lar@quicklz.com
-//
-// QuickLZ can be used for free under the GPL-1 or GPL-2 license (where anything 
-// released into public must be open source) or under a commercial license if such 
-// has been acquired (see http://www.quicklz.com/order.html). The commercial license 
-// does not cover derived or ported versions created by third parties under GPL.
-
-// You can edit following user settings. Data must be decompressed with the same 
-// setting of QLZ_COMPRESSION_LEVEL and QLZ_STREAMING_BUFFER as it was compressed
-// (see manual). If QLZ_STREAMING_BUFFER > 0, scratch buffers must be initially
-// zeroed out (see manual). First #ifndef makes it possible to define settings from 
-// the outside like the compiler command line or from higher level code.
-
-// Version 1.4.1 final - april 2010
-
-#ifndef QLZ_COMPRESSION_LEVEL
-	#define QLZ_COMPRESSION_LEVEL 1
-	//#define QLZ_COMPRESSION_LEVEL 2
-	//#define QLZ_COMPRESSION_LEVEL 3
-
-	#define QLZ_STREAMING_BUFFER 0
-	//#define QLZ_STREAMING_BUFFER 100000
-	//#define QLZ_STREAMING_BUFFER 1000000
-
-	//#define QLZ_MEMORY_SAFE
-#endif
-
-#define QLZ_VERSION_MAJOR 1
-#define QLZ_VERSION_MINOR 4
-#define QLZ_VERSION_REVISION 1
-
-// Using size_t, memset() and memcpy()
-#include <string.h>
-
-// Public functions of QuickLZ
-size_t qlz_size_decompressed(const char *source);
-size_t qlz_size_compressed(const char *source);
-size_t qlz_decompress(const char *source, void *destination, char *scratch_decompress);
-size_t qlz_compress(const void *source, char *destination, size_t size, char *scratch_compress);
-int qlz_get_setting(int setting);
-
-// Verify compression level
-#if QLZ_COMPRESSION_LEVEL != 1 && QLZ_COMPRESSION_LEVEL != 2 && QLZ_COMPRESSION_LEVEL != 3
-#error QLZ_COMPRESSION_LEVEL must be 1, 2 or 3
-#endif
-
-// Compute QLZ_SCRATCH_COMPRESS and QLZ_SCRATCH_DECOMPRESS
-#if QLZ_COMPRESSION_LEVEL == 1
-#define QLZ_POINTERS 1
-#define QLZ_HASH_VALUES 4096
-#elif QLZ_COMPRESSION_LEVEL == 2
-#define QLZ_POINTERS 4
-#define QLZ_HASH_VALUES 2048
-#elif QLZ_COMPRESSION_LEVEL == 3
-#define QLZ_POINTERS 16
-#define QLZ_HASH_VALUES 4096
-#endif
-
-typedef struct 
-{
-#if QLZ_COMPRESSION_LEVEL == 1
-	unsigned int cache[QLZ_POINTERS];
-#endif
-	const unsigned char *offset[QLZ_POINTERS];
-} qlz_hash_compress;
-
-typedef struct 
-{
-	const unsigned char *offset[QLZ_POINTERS];
-} qlz_hash_decompress;
-
-
-#define QLZ_ALIGNMENT_PADD 8
-#define QLZ_BUFFER_COUNTER 8
-
-#define QLZ_SCRATCH_COMPRESS (QLZ_ALIGNMENT_PADD + QLZ_BUFFER_COUNTER + QLZ_STREAMING_BUFFER + sizeof(qlz_hash_compress[QLZ_HASH_VALUES]) + QLZ_HASH_VALUES)
-
-#if QLZ_COMPRESSION_LEVEL < 3
-	#define QLZ_SCRATCH_DECOMPRESS (QLZ_ALIGNMENT_PADD + QLZ_BUFFER_COUNTER + QLZ_STREAMING_BUFFER + sizeof(qlz_hash_decompress[QLZ_HASH_VALUES]) + QLZ_HASH_VALUES)
-#else
-	#define QLZ_SCRATCH_DECOMPRESS (QLZ_ALIGNMENT_PADD + QLZ_BUFFER_COUNTER + QLZ_STREAMING_BUFFER)
-#endif
-
-#endif
-
-
-
-
-
+#ifndef QLZ_HEADER
+#define QLZ_HEADER
+
+// Fast data compression library
+// Copyright (C) 2006-2011 Lasse Mikkel Reinhold
+// lar@quicklz.com
+//
+// QuickLZ can be used for free under the GPL 1, 2 or 3 license (where anything 
+// released into public must be open source) or under a commercial license if such 
+// has been acquired (see http://www.quicklz.com/order.html). The commercial license 
+// does not cover derived or ported versions created by third parties under GPL.
+
+// You can edit following user settings. Data must be decompressed with the same 
+// setting of QLZ_COMPRESSION_LEVEL and QLZ_STREAMING_BUFFER as it was compressed
+// (see manual). First #ifndef makes it possible to define settings from 
+// the outside like the compiler command line.
+
+// 1.5.1 BETA 7
+
+#ifndef QLZ_COMPRESSION_LEVEL
+	#define QLZ_COMPRESSION_LEVEL 1
+	//#define QLZ_COMPRESSION_LEVEL 2
+	//#define QLZ_COMPRESSION_LEVEL 3
+
+	#define QLZ_STREAMING_BUFFER 0
+	//#define QLZ_STREAMING_BUFFER 100000
+	//#define QLZ_STREAMING_BUFFER 1000000
+
+	//#define QLZ_MEMORY_SAFE
+#endif
+
+#define QLZ_VERSION_MAJOR 1
+#define QLZ_VERSION_MINOR 5
+#define QLZ_VERSION_REVISION 1
+
+// Using size_t, memset() and memcpy()
+#include <string.h>
+
+// Verify compression level
+#if QLZ_COMPRESSION_LEVEL != 1 && QLZ_COMPRESSION_LEVEL != 2 && QLZ_COMPRESSION_LEVEL != 3
+#error QLZ_COMPRESSION_LEVEL must be 1, 2 or 3
+#endif
+
+typedef unsigned int ui32;
+typedef unsigned short int ui16;
+
+// Decrease QLZ_POINTERS for level 3 to increase compression speed. Do not touch any other values!
+#if QLZ_COMPRESSION_LEVEL == 1
+#define QLZ_POINTERS 1
+#define QLZ_HASH_VALUES 4096
+#elif QLZ_COMPRESSION_LEVEL == 2
+#define QLZ_POINTERS 4
+#define QLZ_HASH_VALUES 2048
+#elif QLZ_COMPRESSION_LEVEL == 3
+#define QLZ_POINTERS 16
+#define QLZ_HASH_VALUES 4096
+#endif
+
+// Detect if pointer size is 64-bit. It's not fatal if some 64-bit target is not detected because this is only for adding an optional 64-bit optimization.
+#if defined _LP64 || defined __LP64__ || defined __64BIT__ || _ADDR64 || defined _WIN64 || defined __arch64__ || __WORDSIZE == 64 || (defined __sparc && defined __sparcv9) || defined __x86_64 || defined __amd64 || defined __x86_64__ || defined _M_X64 || defined _M_IA64 || defined __ia64 || defined __IA64__
+	#define QLZ_PTR_64
+#endif
+
+// hash entry
+typedef struct 
+{
+#if QLZ_COMPRESSION_LEVEL == 1
+	ui32 cache;
+#if defined QLZ_PTR_64 && QLZ_STREAMING_BUFFER == 0
+	unsigned int offset;
+#else
+	const unsigned char *offset;
+#endif
+#else
+	const unsigned char *offset[QLZ_POINTERS];
+#endif
+
+} qlz_hash_compress;
+
+typedef struct 
+{
+#if QLZ_COMPRESSION_LEVEL == 1
+	const unsigned char *offset;
+#else
+	const unsigned char *offset[QLZ_POINTERS];
+#endif
+} qlz_hash_decompress;
+
+
+// states
+typedef struct
+{
+	#if QLZ_STREAMING_BUFFER > 0
+		unsigned char stream_buffer[QLZ_STREAMING_BUFFER];
+	#endif
+	size_t stream_counter;
+	qlz_hash_compress hash[QLZ_HASH_VALUES];
+	unsigned char hash_counter[QLZ_HASH_VALUES];
+} qlz_state_compress;
+
+
+#if QLZ_COMPRESSION_LEVEL == 1 || QLZ_COMPRESSION_LEVEL == 2
+	typedef struct
+	{
+#if QLZ_STREAMING_BUFFER > 0
+		unsigned char stream_buffer[QLZ_STREAMING_BUFFER];
+#endif
+		qlz_hash_decompress hash[QLZ_HASH_VALUES];
+		unsigned char hash_counter[QLZ_HASH_VALUES];
+		size_t stream_counter;
+	} qlz_state_decompress;
+#elif QLZ_COMPRESSION_LEVEL == 3
+	typedef struct
+	{
+#if QLZ_STREAMING_BUFFER > 0
+		unsigned char stream_buffer[QLZ_STREAMING_BUFFER];
+#endif
+#if QLZ_COMPRESSION_LEVEL <= 2
+		qlz_hash_decompress hash[QLZ_HASH_VALUES];
+#endif
+		size_t stream_counter;
+	} qlz_state_decompress;
+#endif
+
+
+#if defined (__cplusplus)
+extern "C" {
+#endif
+
+// Public functions of QuickLZ
+size_t qlz_size_decompressed(const char *source);
+size_t qlz_size_compressed(const char *source);
+size_t qlz_compress(const void *source, char *destination, size_t size, qlz_state_compress *state);
+size_t qlz_decompress(const char *source, void *destination, qlz_state_decompress *state);
+int qlz_get_setting(int setting);
+
+#if defined (__cplusplus)
+}
+#endif
+
+#endif
+
--- a/quicklz.c	2010-04-20 07:26:39.000000000 +0200
+++ b/quicklz.c	2011-10-23 15:03:02.000000000 +0200
@@ -1,826 +1,877 @@
-// Fast data compression library
-// Copyright (C) 2006-2009 Lasse Mikkel Reinhold
-// lar@quicklz.com
-//
-// QuickLZ can be used for free under the GPL-1 or GPL-2 license (where anything 
-// released into public must be open source) or under a commercial license if such 
-// has been acquired (see http://www.quicklz.com/order.html). The commercial license 
-// does not cover derived or ported versions created by third parties under GPL.
-
-// Version 1.4.1 final - april 2010
-
-#include "quicklz.h"
-
-#if QLZ_VERSION_MAJOR != 1 || QLZ_VERSION_MINOR != 4 || QLZ_VERSION_REVISION != 1
-#error quicklz.c and quicklz.h have different versions
-#endif
-
-#if (defined(__X86__) || defined(__i386__) || defined(i386) || defined(_M_IX86) || defined(__386__) || defined(__x86_64__) || defined(_M_X64))
-	#define X86X64
-#endif
-
-#define MINOFFSET 2
-#define UNCONDITIONAL_MATCHLEN 6
-#define UNCOMPRESSED_END 4
-#define CWORD_LEN 4
-
-typedef unsigned int ui32;
-typedef unsigned short int ui16;
-
-int qlz_get_setting(int setting)
-{
-	switch (setting)
-	{
-		case 0: return QLZ_COMPRESSION_LEVEL;
-		case 1: return QLZ_SCRATCH_COMPRESS;
-		case 2: return QLZ_SCRATCH_DECOMPRESS;
-		case 3: return QLZ_STREAMING_BUFFER;
-#ifdef QLZ_MEMORY_SAFE
-		case 6: return 1;
-#else
-		case 6: return 0;
-#endif
-		case 7: return QLZ_VERSION_MAJOR;
-		case 8: return QLZ_VERSION_MINOR;
-		case 9: return QLZ_VERSION_REVISION;
-	}
-	return -1;
-}
-
-static void reset_state(unsigned char hash_counter[QLZ_HASH_VALUES])
-{
-	memset(hash_counter, 0, QLZ_HASH_VALUES);
-}
-
-static __inline ui32 hash_func(ui32 i)
-{
-#if QLZ_COMPRESSION_LEVEL == 2
-	return ((i >> 9) ^ (i >> 13) ^ i) & (QLZ_HASH_VALUES - 1);
-#else
-	return ((i >> 12) ^ i) & (QLZ_HASH_VALUES - 1);
-#endif
-}
-
-static __inline ui32 fast_read(void const *src, ui32 bytes)
-{
-#ifndef X86X64
-	unsigned char *p = (unsigned char*)src;
-	switch (bytes)
-	{
-		case 4:
-			return(*p | *(p + 1) << 8 | *(p + 2) << 16 | *(p + 3) << 24);
-		case 3: 
-			return(*p | *(p + 1) << 8 | *(p + 2) << 16);
-		case 2:
-			return(*p | *(p + 1) << 8);
-		case 1: 
-			return(*p);
-	}
-	return 0;
-#else
-	if (bytes >= 1 && bytes <= 4)
-		return *((ui32*)src);
-	else
-		return 0;
-#endif
-}
-
-static __inline void fast_write(ui32 f, void *dst, size_t bytes)
-{
-#ifndef X86X64
-	unsigned char *p = (unsigned char*)dst;
-
-	switch (bytes)
-	{
-		case 4: 
-			*p = (unsigned char)f;
-			*(p + 1) = (unsigned char)(f >> 8);
-			*(p + 2) = (unsigned char)(f >> 16);
-			*(p + 3) = (unsigned char)(f >> 24);
-			return;
-		case 3:
-			*p = (unsigned char)f;
-			*(p + 1) = (unsigned char)(f >> 8);
-			*(p + 2) = (unsigned char)(f >> 16);
-			return;
-		case 2:
-			*p = (unsigned char)f;
-			*(p + 1) = (unsigned char)(f >> 8);
-			return;
-		case 1:
-			*p = (unsigned char)f;
-			return;
-	}
-#else
-	switch (bytes)
-	{
-		case 4: 
-			*((ui32*)dst) = f;
-			return;
-		case 3:
-			*((ui32*)dst) = f;
-			return;
-		case 2:
-			*((ui16 *)dst) = (ui16)f;
-			return;
-		case 1:
-			*((unsigned char*)dst) = (unsigned char)f;
-			return;
-	}
-#endif
-}
-
-static __inline void memcpy_up(unsigned char *dst, const unsigned char *src, ui32 n)
-{
-	// Caution if modifying memcpy_up! Overlap of dst and src must be special handled.
-#ifndef X86X64
-	unsigned char *end = dst + n;
-	while(dst < end)
-	{
-		*dst = *src;
-		dst++;
-		src++;
-	}
-#else
-	ui32 f = 0;
-	do
-	{
-		*(ui32 *)(dst + f) = *(ui32 *)(src + f);
-		f += MINOFFSET + 1;
-	}
-	while (f < n);
-#endif
-	}
-
-
-#if QLZ_COMPRESSION_LEVEL <= 2
-static __inline void update_hash(qlz_hash_decompress h[QLZ_HASH_VALUES], unsigned char counter[QLZ_HASH_VALUES], const unsigned char *s)
-{
-#if QLZ_COMPRESSION_LEVEL == 1
-	ui32 hash, fetch;
-	fetch = fast_read(s, 3);
-	hash = hash_func(fetch);
-	h[hash].offset[0] = s;
-	counter[hash] = 1;
-#elif QLZ_COMPRESSION_LEVEL == 2
-	ui32 hash, fetch;
-	unsigned char c;
-	fetch = fast_read(s, 3);
-	hash = hash_func(fetch);
-	c = counter[hash];
-	h[hash].offset[c & (QLZ_POINTERS - 1)] = s;
-	c++;
-	counter[hash] = c;
-#endif
-}
-
-static void update_hash_upto(qlz_hash_decompress h[QLZ_HASH_VALUES], unsigned char counter[QLZ_HASH_VALUES], unsigned char **lh, const unsigned char *max)
-{
-	while(*lh < max)
-	{
-		(*lh)++;
-		update_hash(h, counter, *lh);
-	}
-}
-#endif
-
-static size_t qlz_compress_core(const unsigned char *source, unsigned char *destination, size_t size, qlz_hash_compress hashtable[QLZ_HASH_VALUES], unsigned char hash_counter[QLZ_HASH_VALUES])
-{
-	const unsigned char *last_byte = source + size - 1;
-	const unsigned char *src = source;
-	unsigned char *cword_ptr = destination;
-	unsigned char *dst = destination + CWORD_LEN;
-	ui32 cword_val = 1U << 31;
-	const unsigned char *last_matchstart = last_byte - UNCONDITIONAL_MATCHLEN - UNCOMPRESSED_END; 
-	ui32 fetch = 0;
-	unsigned int lits = 0;
-
-	(void) lits;
-
-	if(src <= last_matchstart)
-		fetch = fast_read(src, 3);
-	
-	while(src <= last_matchstart)
-	{
-		if ((cword_val & 1) == 1)
-		{
-			// store uncompressed if compression ratio is too low
-			if (src > source + 3*(size >> 2) && dst - destination > src - source - ((src - source) >> 5))
-				return 0;
-
-			fast_write((cword_val >> 1) | (1U << 31), cword_ptr, CWORD_LEN);
-
-			cword_ptr = dst;
-			dst += CWORD_LEN;
-			cword_val = 1U << 31;
-			fetch = fast_read(src, 3);
-		}
-#if QLZ_COMPRESSION_LEVEL == 1
-		{
-			const unsigned char *o;
-			ui32 hash, cached;
-
-			hash = hash_func(fetch);
-
-			cached = fetch ^ hashtable[hash].cache[0];
-			hashtable[hash].cache[0] = fetch;
-
-			o = hashtable[hash].offset[0];
-			hashtable[hash].offset[0] = src;
-#ifdef X86X64
-			if ((cached & 0xffffff) == 0 && hash_counter[hash] != 0 && (src - o > MINOFFSET || (src == o + 1 && lits >= 3 && src > source + 3 && *src == *(src - 3) && *src == *(src - 2) && *src == *(src - 1) && *src == *(src + 1) && *src == *(src + 2))))
-#else
-			if (cached == 0 && hash_counter[hash] != 0 && (src - o > MINOFFSET || (src == o + 1 && lits >= 3 && src > source + 3 && *src == *(src - 3) && *src == *(src - 2) && *src == *(src - 1) && *src == *(src + 1) && *src == *(src + 2))))
-#endif
-			{
-				if (*(o + 3) != *(src + 3))
-				{
-					cword_val = (cword_val >> 1) | (1U << 31);
-					fast_write((3 - 2) | (hash << 4), dst, 2);
-					src += 3;
-					dst += 2;
-				}
-				else
-				{
-					const unsigned char *old_src = src;
-					size_t matchlen;
-
-					cword_val = (cword_val >> 1) | (1U << 31);
-					src += 4;
-
-					if(*(o + (src - old_src)) == *src)
-					{
-						src++;
-						if(*(o + (src - old_src)) == *src)
-						{
-							size_t q = last_byte - UNCOMPRESSED_END - (src - 5) + 1;
-							size_t remaining = q > 255 ? 255 : q;
-							src++;	
-							while(*(o + (src - old_src)) == *src && (size_t)(src - old_src) < remaining)
-								src++;
-						}
-					}
-
-					matchlen = src - old_src;
-					hash <<= 4;
-					if (matchlen < 18)
-					{
-						fast_write((ui32)(matchlen - 2) | hash, dst, 2);
-						dst += 2;
-					} 
-					else
-					{
-						fast_write((ui32)(matchlen << 16) | hash, dst, 3);
-						dst += 3;
-					}
-				}
-				fetch = fast_read(src, 3);
-				lits = 0;
-			}
-			else
-			{
-				lits++;
-				hash_counter[hash] = 1; 
-				*dst = *src;
-				src++;
-				dst++;
-				cword_val = (cword_val >> 1);
-#ifdef X86X64
-				fetch = fast_read(src, 3);
-#else
-				fetch = fetch >> 8 & 0xffff | *(src + 2) << 16;
-#endif
-			}
-		}
-#elif QLZ_COMPRESSION_LEVEL >= 2
-		{
-			const unsigned char *o, *offset2;
-			ui32 hash, matchlen, k, m, best_k = 0;
-			unsigned char c;
-			size_t remaining = (last_byte - UNCOMPRESSED_END - src + 1) > 255 ? 255 : (last_byte - UNCOMPRESSED_END - src + 1);
-			(void)best_k;
-
-			fetch = fast_read(src, 3);
-			hash = hash_func(fetch);
-
-			c = hash_counter[hash];
-
-			offset2 = hashtable[hash].offset[0];
-			if(offset2 < src - MINOFFSET && c > 0 && ((fast_read(offset2, 3) ^ fetch) & 0xffffff) == 0)
-			{	
-				matchlen = 3;
-				if(*(offset2 + matchlen) == *(src + matchlen))
-				{
-					matchlen = 4;
-					while(*(offset2 + matchlen) == *(src + matchlen) && matchlen < remaining)
-						matchlen++;
-				}
-			}
-			else
-				matchlen = 0;
-			for(k = 1; k < QLZ_POINTERS && c > k; k++)
-			{
-				o = hashtable[hash].offset[k];
-#if QLZ_COMPRESSION_LEVEL == 3
-				if(((fast_read(o, 3) ^ fetch) & 0xffffff) == 0 && o < src - MINOFFSET)
-#elif QLZ_COMPRESSION_LEVEL == 2
-				if(*(src + matchlen) == *(o + matchlen)	&& ((fast_read(o, 3) ^ fetch) & 0xffffff) == 0 && o < src - MINOFFSET)
-#endif
-				{	
-					m = 3;
-					while(*(o + m) == *(src + m) && m < remaining)
-						m++;
-#if QLZ_COMPRESSION_LEVEL == 3
-					if ((m > matchlen) || (m == matchlen && o > offset2))
-#elif QLZ_COMPRESSION_LEVEL == 2
-					if (m > matchlen)
-#endif
-					{
-						offset2 = o;
-						matchlen = m;
-						best_k = k;
-					}
-				}
-			}
-			o = offset2;
-			hashtable[hash].offset[c & (QLZ_POINTERS - 1)] = src;
-			c++;
-			hash_counter[hash] = c;
-
-#if QLZ_COMPRESSION_LEVEL == 3
-			if(matchlen > 2 && src - o < 131071)
-			{
-				ui32 u;
-				size_t offset = src - o;
-
-				for(u = 1; u < matchlen; u++)
-				{	
-					fetch = fast_read(src + u, 3);
-					hash = hash_func(fetch);
-					c = hash_counter[hash]++;
-					hashtable[hash].offset[c & (QLZ_POINTERS - 1)] = src + u;
-				}
-
-				cword_val = (cword_val >> 1) | (1U << 31);
-				src += matchlen;
-
-				if(matchlen == 3 && offset <= 63)
-				{
-					*dst = (unsigned char)(offset << 2);
-					dst++;
-				}
-				else if (matchlen == 3 && offset <= 16383)
-				{
-					ui32 f = (ui32)((offset << 2) | 1);
-					fast_write(f, dst, 2);
-					dst += 2;
-				}		
-				else if (matchlen <= 18 && offset <= 1023)
-				{
-					ui32 f = ((matchlen - 3) << 2) | (offset << 6) | 2;
-					fast_write(f, dst, 2);
-					dst += 2;
-				}
-
-				else if(matchlen <= 33)
-				{
-					ui32 f = ((matchlen - 2) << 2) | (offset << 7) | 3;
-					fast_write(f, dst, 3);
-					dst += 3;
-				}
-				else
-				{
-					ui32 f = ((matchlen - 3) << 7) | (offset << 15) | 3;
-					fast_write(f, dst, 4);
-					dst += 4;
-				}
-			}
-			else
-			{
-				*dst = *src;
-				src++;
-				dst++;
-				cword_val = (cword_val >> 1);
-			}
-
-#elif QLZ_COMPRESSION_LEVEL == 2
-
-			if(matchlen > 2)
-			{
-				cword_val = (cword_val >> 1) | (1U << 31);
-				src += matchlen;			
-
-				if (matchlen < 10)
-				{			
-					ui32 f = best_k | ((matchlen - 2) << 2) | (hash << 5);
-					fast_write(f, dst, 2);
-					dst += 2;
-				}
-				else
-				{
-					ui32 f = best_k | (matchlen << 16) | (hash << 5);
-					fast_write(f, dst, 3);
-					dst += 3;
-				}
-			}
-			else
-			{
-				*dst = *src;
-				src++;
-				dst++;
-				cword_val = (cword_val >> 1);
-			}
-#endif
-		}
-#endif
-
-	}
-
-	while (src <= last_byte)
-	{
-		if ((cword_val & 1) == 1)
-		{
-			fast_write((cword_val >> 1) | (1U << 31), cword_ptr, CWORD_LEN);
-			cword_ptr = dst;
-			dst += CWORD_LEN;
-			cword_val = 1U << 31;
-		}
-#if QLZ_COMPRESSION_LEVEL < 3
-		if (src <= last_byte - 3)
-		{
-#if QLZ_COMPRESSION_LEVEL == 1
-			ui32 hash;
-			fetch = fast_read(src, 3);
-			hash = hash_func(fetch);
-			hashtable[hash].offset[0] = src;
-			hashtable[hash].cache[0] = fetch;
-			hash_counter[hash] = 1;
-#elif QLZ_COMPRESSION_LEVEL == 2
-			ui32 hash;
-			unsigned char c;
-			fetch = fast_read(src, 3);
-			hash = hash_func(fetch);
-			c = hash_counter[hash];
-			hashtable[hash].offset[c & (QLZ_POINTERS - 1)] = src;
-			c++;
-			hash_counter[hash] = c;
-#endif
-		}
-#endif
-		*dst = *src;
-		src++;
-		dst++;
-
-		cword_val = (cword_val >> 1);
-	}
-
-	while((cword_val & 1) != 1)
-		cword_val = (cword_val >> 1);
-
-	fast_write((cword_val >> 1) | (1U << 31), cword_ptr, CWORD_LEN);
-
-	// min. size must be 9 bytes so that the qlz_size functions can take 9 bytes as argument
-	return dst - destination < 9 ? 9 : dst - destination;
-}
-
-static size_t qlz_decompress_core(const unsigned char *source, unsigned char *destination, size_t size, qlz_hash_decompress hashtable[QLZ_HASH_VALUES], unsigned char hash_counter[QLZ_HASH_VALUES], unsigned char *history, const char *source_2)
-{
-	const unsigned char *src = source;
-	unsigned char *dst = destination;
-	const unsigned char *last_destination_byte = destination + size - 1;
-	ui32 cword_val = 1;
-	const ui32 bitlut[16] = {4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0};
-	const unsigned char *last_matchstart = last_destination_byte - UNCONDITIONAL_MATCHLEN - UNCOMPRESSED_END;
-	unsigned char *last_hashed = destination - 1;
-	const unsigned char *last_source_byte = (const unsigned char *)source_2 + qlz_size_compressed(source_2) - 1;
-
-	(void) last_source_byte;
-	(void) history;
-	(void) last_hashed;
-	(void) hash_counter;
-	(void) hashtable;
-
-	for(;;) 
-	{
-		ui32 fetch;
-
-		if (cword_val == 1)
-		{
-#ifdef QLZ_MEMORY_SAFE
-			if(src + CWORD_LEN - 1 > last_source_byte)
-				return 0;
-#endif
-			cword_val = fast_read(src, CWORD_LEN);
-			src += CWORD_LEN;
-		}
-
-#ifdef QLZ_MEMORY_SAFE
-			if(src + 4 - 1 > last_source_byte)
-				return 0;
-#endif
-
-		fetch = fast_read(src, 4);
-
-		if ((cword_val & 1) == 1)
-
-		{
-			ui32 matchlen;
-			const unsigned char *offset2;
-
-#if QLZ_COMPRESSION_LEVEL == 1
-			ui32 hash;
-			cword_val = cword_val >> 1;
-			hash = (fetch >> 4) & 0xfff;
-			offset2 = hashtable[hash].offset[0];
-
-			if((fetch & 0xf) != 0)
-			{
-				matchlen = (fetch & 0xf) + 2;
-				src += 2;
-			}
-			else
-			{
-				matchlen = *(src + 2);
-				src += 3;							
-			}	
-
-#elif QLZ_COMPRESSION_LEVEL == 2
-			ui32 hash;
-			unsigned char c;
-			cword_val = cword_val >> 1;
-			hash = (fetch >> 5) & 0x7ff;
-			c = (unsigned char)(fetch & 0x3);
-			offset2 = hashtable[hash].offset[c];
-
-			if((fetch & (28)) != 0)
-			{
-				matchlen = ((fetch >> 2) & 0x7) + 2;
-				src += 2;			
-			}
-			else
-			{
-				matchlen = *(src + 2);
-				src += 3;							
-			}	
-
-#elif QLZ_COMPRESSION_LEVEL == 3
-			ui32 offset;
-			cword_val = cword_val >> 1;
-			if ((fetch & 3) == 0)
-			{
-				offset = (fetch & 0xff) >> 2;
-				matchlen = 3;
-				src++;
-			}
-			else if ((fetch & 2) == 0)
-			{
-				offset = (fetch & 0xffff) >> 2;
-				matchlen = 3;
-				src += 2;
-			}
-			else if ((fetch & 1) == 0)
-			{
-				offset = (fetch & 0xffff) >> 6;
-				matchlen = ((fetch >> 2) & 15) + 3;
-				src += 2;
-			}
-			else if ((fetch & 127) != 3)
-			{
-				offset = (fetch >> 7) & 0x1ffff;
-				matchlen = ((fetch >> 2) & 0x1f) + 2;
-				src += 3;
-			}
-			else
-			{
-				offset = (fetch >> 15);
-				matchlen = ((fetch >> 7) & 255) + 3;
-				src += 4;
-			}
-
-			offset2 = dst - offset;
-#endif
-	
-#ifdef QLZ_MEMORY_SAFE
-			if(offset2 < history || offset2 > dst - MINOFFSET - 1)
-				return 0;
-
-			if(matchlen > (ui32)(last_destination_byte - dst - UNCOMPRESSED_END + 1))
-				return 0;
-#endif
-			memcpy_up(dst, offset2, matchlen);
-			dst += matchlen;
-
-#if QLZ_COMPRESSION_LEVEL <= 2
-			update_hash_upto(hashtable, hash_counter, &last_hashed, dst - matchlen);
-			last_hashed = dst - 1;
-#endif
-		}
-
-		else
-		{
-			if (dst < last_matchstart)
-			{
-#ifdef X86X64
-				*(ui32 *)dst = *(ui32 *)src;
-#else
-				memcpy_up(dst, src, 4);
-#endif
-				dst += bitlut[cword_val & 0xf];
-				src += bitlut[cword_val & 0xf];
-				cword_val = cword_val >> (bitlut[cword_val & 0xf]);
-#if QLZ_COMPRESSION_LEVEL <= 2
-				update_hash_upto(hashtable, hash_counter, &last_hashed, dst - 3);		
-#endif
-			}
-			else
-			{			
-				while(dst <= last_destination_byte)
-				{
-					if (cword_val == 1)
-					{
-						src += CWORD_LEN;
-						cword_val = 1U << 31;
-					}
-#ifdef QLZ_MEMORY_SAFE
-					if(src >= last_source_byte + 1)
-						return 0;
-#endif
-					*dst = *src;
-					dst++;
-					src++;
-					cword_val = cword_val >> 1;
-				}
-
-#if QLZ_COMPRESSION_LEVEL <= 2
-				update_hash_upto(hashtable, hash_counter, &last_hashed, last_destination_byte - 3); // todo, use constant
-#endif
-				return size;
-			}
-
-		}
-	}
-}
-
-size_t qlz_size_decompressed(const char *source)
-{
-	ui32 n, r;
-	n = (((*source) & 2) == 2) ? 4 : 1;
-	r = fast_read(source + 1 + n, n);
-	r = r & (0xffffffff >> ((4 - n)*8));
-	return r;
-}
-
-size_t qlz_size_compressed(const char *source)
-{
-	ui32 n, r;
-	n = (((*source) & 2) == 2) ? 4 : 1;
-	r = fast_read(source + 1, n);
-	r = r & (0xffffffff >> ((4 - n)*8));
-	return r;
-}
-
-size_t qlz_compress(const void *source, char *destination, size_t size, char *scratch_compress)
-{
-	unsigned char *scratch_aligned = (unsigned char *)scratch_compress + QLZ_ALIGNMENT_PADD - (((size_t)scratch_compress) % QLZ_ALIGNMENT_PADD);
-	size_t *buffersize = (size_t *)scratch_aligned;
-	qlz_hash_compress *hashtable = (qlz_hash_compress *)(scratch_aligned + QLZ_BUFFER_COUNTER);
-	unsigned char *hash_counter = (unsigned char*)hashtable + sizeof(qlz_hash_compress[QLZ_HASH_VALUES]);
-#if QLZ_STREAMING_BUFFER > 0
-	unsigned char *streambuffer = hash_counter + QLZ_HASH_VALUES;
-#endif
-	size_t r;
-	ui32 compressed;
-	size_t base;
-
-	if(size == 0 || size > 0xffffffff - 400)
-		return 0;
-
-	if(size < 216)
-		base = 3;
-	else
-		base = 9;
-
-#if QLZ_STREAMING_BUFFER > 0
-	if (*buffersize + size - 1 >= QLZ_STREAMING_BUFFER)
-#endif
-	{
-		reset_state(hash_counter);
-		r = base + qlz_compress_core((const unsigned char *)source, (unsigned char*)destination + base, size, hashtable, hash_counter);
-#if QLZ_STREAMING_BUFFER > 0
-		reset_state(hash_counter);
-#endif
-		if(r == base)
-		{
-			memcpy(destination + base, source, size);
-			r = size + base;
-			compressed = 0;
-		}
-		else
-		{
-			compressed = 1;
-		}
-		*buffersize = 0;
-	}
-#if QLZ_STREAMING_BUFFER > 0
-	else
-	{
-		memcpy(streambuffer + *buffersize, source, size);
-		r = base + qlz_compress_core((const unsigned char *)streambuffer + *buffersize, (unsigned char*)destination + base, size, hashtable, hash_counter);
-
-		if(r == base)
-		{
-			memcpy(destination + base, streambuffer + *buffersize, size);
-			r = size + base;
-			compressed = 0;
-			reset_state(hash_counter);
-		}
-		else
-		{
-			compressed = 1;
-		}
-		*buffersize += size;
-	}
-#endif
-	if(base == 3)
-	{
-		*destination = (unsigned char)(0 | compressed);
-		*(destination + 1) = (unsigned char)r;
-		*(destination + 2) = (unsigned char)size;
-	}
-	else
-	{
-		*destination = (unsigned char)(2 | compressed);
-		fast_write((ui32)r, destination + 1, 4);
-		fast_write((ui32)size, destination + 5, 4);
-	}
-	
-	*destination |= (QLZ_COMPRESSION_LEVEL << 2);
-	*destination |= (1 << 6);
-	*destination |= ((QLZ_STREAMING_BUFFER == 0 ? 0 : (QLZ_STREAMING_BUFFER == 100000 ? 1 : (QLZ_STREAMING_BUFFER == 1000000 ? 2 : 3))) << 4);
-
-// 76543210
-// 01SSLLHC
-
-	return r;
-}
-
-size_t qlz_decompress(const char *source, void *destination, char *scratch_compress)
-{
-	unsigned char *scratch_aligned = (unsigned char *)scratch_compress + QLZ_ALIGNMENT_PADD - (((size_t)scratch_compress) % QLZ_ALIGNMENT_PADD);
-	size_t *buffersize = (size_t *)scratch_aligned;
-#if QLZ_COMPRESSION_LEVEL == 3
-#if QLZ_STREAMING_BUFFER > 0
-	unsigned char *streambuffer = scratch_aligned + QLZ_BUFFER_COUNTER;
-#endif
-	unsigned char *hash_counter = 0;
-	qlz_hash_decompress *hashtable = 0;
-#elif QLZ_COMPRESSION_LEVEL <= 2
-	qlz_hash_decompress *hashtable = (qlz_hash_decompress *)(scratch_aligned + QLZ_BUFFER_COUNTER); 
-	unsigned char *hash_counter = (unsigned char*)hashtable + sizeof(qlz_hash_decompress[QLZ_HASH_VALUES]);
-#if QLZ_STREAMING_BUFFER > 0
-	unsigned char *streambuffer = hash_counter + QLZ_HASH_VALUES; 
-#endif
-#endif
-	ui32 headerlen = 2*((((*source) & 2) == 2) ? 4 : 1) + 1;
-	size_t dsiz = qlz_size_decompressed(source);
-
-#if QLZ_STREAMING_BUFFER > 0
-	if (*buffersize + qlz_size_decompressed(source) - 1 >= QLZ_STREAMING_BUFFER) 
-#endif
-	{	
-		if((*source & 1) == 1)
-		{
-#if QLZ_COMPRESSION_LEVEL != 3
-			reset_state(hash_counter);
-#endif
-			dsiz = qlz_decompress_core((const unsigned char *)source + headerlen, (unsigned char *)destination, dsiz, hashtable, hash_counter, (unsigned char *)destination, source);
-		}
-		else
-		{
-			memcpy(destination, source + headerlen, dsiz);
-		}
-		*buffersize = 0;
-#if QLZ_COMPRESSION_LEVEL != 3
-		reset_state(hash_counter);
-#endif
-	}
-#if QLZ_STREAMING_BUFFER > 0
-	else
-	{
-		if((*source & 1) == 1)
-		{
-			dsiz = qlz_decompress_core((const unsigned char *)source + headerlen, streambuffer + *buffersize, dsiz, hashtable, hash_counter, streambuffer, source);
-		}
-		else
-		{
-			memcpy(streambuffer + *buffersize, source + headerlen, dsiz);
-#if QLZ_COMPRESSION_LEVEL != 3
-			reset_state(hash_counter);
-#endif
-		}
-		memcpy(destination, streambuffer + *buffersize, dsiz);
-		*buffersize += dsiz;
-	}
-#endif
-	return dsiz;
-}
+// Fast data compression library
+// Copyright (C) 2006-2011 Lasse Mikkel Reinhold
+// lar@quicklz.com
+//
+// QuickLZ can be used for free under the GPL 1, 2 or 3 license (where anything 
+// released into public must be open source) or under a commercial license if such 
+// has been acquired (see http://www.quicklz.com/order.html). The commercial license 
+// does not cover derived or ported versions created by third parties under GPL.
+
+// 1.5.1 BETA 7
+
+#include "quicklz.h"
+#if defined _MSC_VER
+	#include <intrin.h>
+#endif
+
+#if QLZ_VERSION_MAJOR != 1 || QLZ_VERSION_MINOR != 5 || QLZ_VERSION_REVISION != 1
+	#error quicklz.c and quicklz.h have different versions
+#endif
+
+#if (defined(__X86__) || defined(__i386__) || defined(i386) || defined(_M_IX86) || defined(__386__) || defined(__x86_64__) || defined(_M_X64))
+	#define X86X64
+#endif
+
+#define MINOFFSET 2
+#define UNCONDITIONAL_MATCHLEN_COMPRESSOR 12
+#define UNCONDITIONAL_MATCHLEN_DECOMPRESSOR 6
+#define UNCOMPRESSED_END 4
+#define CWORD_LEN 4
+
+#if QLZ_COMPRESSION_LEVEL == 1 && defined QLZ_PTR_64 && QLZ_STREAMING_BUFFER == 0
+	#define OFFSET_BASE source
+	#define CAST (ui32)(size_t)
+#else
+	#define OFFSET_BASE 0
+	#define CAST
+#endif
+
+#if defined(X86X64) && (defined(__GNUC__) || defined(__INTEL_COMPILER))
+	#define qlz_likely(x) __builtin_expect (x, 1)
+	#define qlz_unlikely(x) __builtin_expect (x, 0)
+#else
+	#define qlz_likely(x) (x)
+	#define qlz_unlikely(x) (x)
+#endif
+
+int qlz_get_setting(int setting)
+{
+	switch (setting)
+	{
+		case 0: return QLZ_COMPRESSION_LEVEL;
+		case 1: return sizeof(qlz_state_compress);
+		case 2: return sizeof(qlz_state_decompress);
+		case 3: return QLZ_STREAMING_BUFFER;
+#ifdef QLZ_MEMORY_SAFE
+		case 6: return 1;
+#else
+		case 6: return 0;
+#endif
+		case 7: return QLZ_VERSION_MAJOR;
+		case 8: return QLZ_VERSION_MINOR;
+		case 9: return QLZ_VERSION_REVISION;
+	}
+	return -1;
+}
+
+#if QLZ_COMPRESSION_LEVEL == 1
+static int same(const unsigned char *src, size_t n)
+{
+	while(n > 0 && *(src + n) == *src)
+		n--;
+	return n == 0 ? 1 : 0;
+}
+#endif
+
+static void reset_table_compress(qlz_state_compress *state)
+{
+	int i;
+	for(i = 0; i < QLZ_HASH_VALUES; i++)
+	{
+#if QLZ_COMPRESSION_LEVEL == 1
+		state->hash[i].offset = 0;
+#else
+		state->hash_counter[i] = 0;
+#endif
+	}
+}
+
+static void reset_table_decompress(qlz_state_decompress *state)
+{
+	int i;
+	(void)state;
+	(void)i;
+#if QLZ_COMPRESSION_LEVEL == 2
+	for(i = 0; i < QLZ_HASH_VALUES; i++)
+	{
+		state->hash_counter[i] = 0;
+	}
+#endif
+}
+
+static __inline ui32 hash_func(ui32 i)
+{
+#if QLZ_COMPRESSION_LEVEL == 2
+	return ((i >> 9) ^ (i >> 13) ^ i) & (QLZ_HASH_VALUES - 1);
+#else
+	return ((i >> 12) ^ i) & (QLZ_HASH_VALUES - 1);
+#endif
+}
+
+static __inline ui32 fast_read(void const *src, ui32 bytes)
+{
+#ifndef X86X64
+	unsigned char *p = (unsigned char*)src;
+	switch (bytes)
+	{
+		case 4:
+			return(*p | *(p + 1) << 8 | *(p + 2) << 16 | *(p + 3) << 24);
+		case 3: 
+			return(*p | *(p + 1) << 8 | *(p + 2) << 16);
+		case 2:
+			return(*p | *(p + 1) << 8);
+		case 1: 
+			return(*p);
+	}
+	return 0;
+#else
+	if (bytes >= 1 && bytes <= 4)
+		return *((ui32*)src);
+	else
+		return 0;
+#endif
+}
+
+static __inline ui32 hashat(const unsigned char *src)
+{
+	ui32 fetch, hash;
+	fetch = fast_read(src, 3);
+	hash = hash_func(fetch);
+	return hash;
+}
+
+static __inline void fast_write(ui32 f, void *dst, size_t bytes)
+{
+#ifndef X86X64
+	unsigned char *p = (unsigned char*)dst;
+
+	switch (bytes)
+	{
+		case 4: 
+			*p = (unsigned char)f;
+			*(p + 1) = (unsigned char)(f >> 8);
+			*(p + 2) = (unsigned char)(f >> 16);
+			*(p + 3) = (unsigned char)(f >> 24);
+			return;
+		case 3:
+			*p = (unsigned char)f;
+			*(p + 1) = (unsigned char)(f >> 8);
+			*(p + 2) = (unsigned char)(f >> 16);
+			return;
+		case 2:
+			*p = (unsigned char)f;
+			*(p + 1) = (unsigned char)(f >> 8);
+			return;
+		case 1:
+			*p = (unsigned char)f;
+			return;
+	}
+#else
+	switch (bytes)
+	{
+		case 4: 
+			*((ui32*)dst) = f;
+			return;
+		case 3:
+			*((ui32*)dst) = f;
+			return;
+		case 2:
+			*((ui16 *)dst) = (ui16)f;
+			return;
+		case 1:
+			*((unsigned char*)dst) = (unsigned char)f;
+			return;
+	}
+#endif
+}
+
+
+size_t qlz_size_decompressed(const char *source)
+{
+	ui32 n, r;
+	n = (((*source) & 2) == 2) ? 4 : 1;
+	r = fast_read(source + 1 + n, n);
+	r = r & (0xffffffff >> ((4 - n)*8));
+	return r;
+}
+
+size_t qlz_size_compressed(const char *source)
+{
+	ui32 n, r;
+	n = (((*source) & 2) == 2) ? 4 : 1;
+	r = fast_read(source + 1, n);
+	r = r & (0xffffffff >> ((4 - n)*8));
+	return r;
+}
+
+size_t qlz_size_header(const char *source)
+{
+	size_t n = 2*((((*source) & 2) == 2) ? 4 : 1) + 1;
+	return n;
+}
+
+
+static __inline void memcpy_up(unsigned char *dst, const unsigned char *src, ui32 n)
+{
+	// Caution if modifying memcpy_up! Overlap of dst and src must be special handled.
+#ifndef X86X64
+	unsigned char *end = dst + n;
+	while(dst < end)
+	{
+		*dst = *src;
+		dst++;
+		src++;
+	}
+#else
+	ui32 f = 0;
+	do
+	{
+		*(ui32 *)(dst + f) = *(ui32 *)(src + f);
+		f += MINOFFSET + 1;
+	}
+	while (f < n);
+#endif
+}
+
+static __inline void update_hash(qlz_state_decompress *state, const unsigned char *s)
+{
+#if QLZ_COMPRESSION_LEVEL == 1
+	ui32 hash;
+	hash = hashat(s);
+	state->hash[hash].offset = s;
+	state->hash_counter[hash] = 1;
+#elif QLZ_COMPRESSION_LEVEL == 2
+	ui32 hash;
+	unsigned char c;
+	hash = hashat(s);
+	c = state->hash_counter[hash];
+	state->hash[hash].offset[c & (QLZ_POINTERS - 1)] = s;
+	c++;
+	state->hash_counter[hash] = c;
+#endif
+	(void)state;
+	(void)s;
+}
+
+#if QLZ_COMPRESSION_LEVEL <= 2
+static void update_hash_upto(qlz_state_decompress *state, unsigned char **lh, const unsigned char *max)
+{
+	while(*lh < max)
+	{
+		(*lh)++;
+		update_hash(state, *lh);
+	}
+}
+#endif
+
+static size_t qlz_compress_core(const unsigned char *source, unsigned char *destination, size_t size, qlz_state_compress *state)
+{
+	const unsigned char *last_byte = source + size - 1;
+	const unsigned char *src = source;
+	unsigned char *cword_ptr = destination;
+	unsigned char *dst = destination + CWORD_LEN;
+	ui32 cword_val = 1U << 31;
+	const unsigned char *last_matchstart = last_byte - UNCONDITIONAL_MATCHLEN_COMPRESSOR - UNCOMPRESSED_END; 
+	ui32 fetch = 0;
+	unsigned int lits = 0;
+
+	(void) lits;
+
+	if(src <= last_matchstart)
+		fetch = fast_read(src, 3);
+	
+	while(qlz_likely(src <= last_matchstart))
+	{
+		if (qlz_unlikely( (cword_val & 1) == 1))
+		{
+			// store uncompressed if compression ratio is too low
+			if (src > source + (size >> 1) && dst - destination > src - source - ((src - source) >> 5))
+				return 0;
+
+			fast_write((cword_val >> 1) | (1U << 31), cword_ptr, CWORD_LEN);
+
+			cword_ptr = dst;
+			dst += CWORD_LEN;
+			cword_val = 1U << 31;
+			fetch = fast_read(src, 3);
+		}
+#if QLZ_COMPRESSION_LEVEL == 1
+		{
+			const unsigned char *o;
+			ui32 hash, cached;
+
+			hash = hash_func(fetch);
+			cached = fetch ^ state->hash[hash].cache;
+			state->hash[hash].cache = fetch;
+
+			o = state->hash[hash].offset + OFFSET_BASE;
+			state->hash[hash].offset = CAST(src - OFFSET_BASE);
+#ifdef X86X64
+			if ((cached & 0xffffff) == 0 && o != OFFSET_BASE && (src - o > MINOFFSET || (src == o + 1 && lits >= 3 && src > source + 3 && same(src - 3, 6))))
+			{
+#else
+			if (cached == 0 && o != OFFSET_BASE && (src - o > MINOFFSET || (src == o + 1 && lits >= 3 && src > source + 3 && same(src - 3, 6))))
+			{
+#endif
+				size_t matchlen = 3;
+				hash <<= 4;
+				cword_val = (cword_val >> 1) | (1U << 31);
+
+#if defined X86X64 && defined QLZ_PTR_64 
+				{
+#ifdef __GNUC__
+					unsigned long long a = *(unsigned long long *)(src + matchlen);
+					unsigned long long b = *(unsigned long long *)(o + matchlen);
+					unsigned long long c = a^b;
+#else
+					unsigned int a = *(unsigned int *)(src + matchlen);
+					unsigned int b = *(unsigned int *)(o + matchlen);
+					unsigned int c = a^b;
+#endif
+					if(qlz_unlikely(c == 0))
+					{
+						size_t q = last_byte - UNCOMPRESSED_END - src + 1;
+						size_t remaining = q > 255 ? 255 : q;
+						matchlen += sizeof(c);
+						while(src[matchlen] == o[matchlen] && matchlen < remaining)
+							matchlen++;
+					}
+					else
+					{
+#if defined _MSC_VER || defined __INTEL_COMPILER
+						unsigned int index = 0;
+						_BitScanForward((unsigned long *)&index, c);
+						matchlen += index >> 3;
+#else
+						matchlen += __builtin_ctzll(c) >> 3;
+#endif
+					}
+				}
+#else
+				if(src[matchlen] == o[matchlen])
+				{															
+					size_t q = last_byte - UNCOMPRESSED_END - src + 1;
+					size_t remaining = q > 255 ? 255 : q;
+					matchlen ++;
+					while(src[matchlen] == o[matchlen] && matchlen < remaining)
+						matchlen++;
+				}
+#endif
+				src += matchlen;
+
+				if (qlz_likely(matchlen < 18))
+				{
+					fast_write((ui32)(matchlen - 2) | hash, dst, 2);
+					dst += 2;
+				} 
+				else
+				{
+					fast_write((ui32)(matchlen << 16) | hash, dst, 3);
+					dst += 3;
+				}
+				
+				fetch = fast_read(src, 3);
+				lits = 0;
+			}
+			else
+			{
+				lits++;
+				*dst = *src;
+				src++;
+				dst++;
+				cword_val = (cword_val >> 1);
+#ifdef X86X64
+				fetch = fast_read(src, 3);
+#else
+				fetch = (fetch >> 8 & 0xffff) | (*(src + 2) << 16);
+#endif
+			}
+		}
+#elif QLZ_COMPRESSION_LEVEL >= 2
+		{
+			const unsigned char *o, *offset2;
+			ui32 hash, matchlen, k, m, best_k = 0;
+			unsigned char c;
+			size_t remaining = (last_byte - UNCOMPRESSED_END - src + 1) > 255 ? 255 : (last_byte - UNCOMPRESSED_END - src + 1);
+			(void)best_k;
+		
+			fetch = fast_read(src, 3);
+			hash = hash_func(fetch);
+
+			c = state->hash_counter[hash];
+
+			offset2 = state->hash[hash].offset[0];
+			if(offset2 < src - MINOFFSET && c > 0 && ((fast_read(offset2, 3) ^ fetch) & 0xffffff) == 0)
+			{	
+				matchlen = 3;
+				if(*(offset2 + matchlen) == *(src + matchlen))
+				{
+					matchlen = 4;
+					while(*(offset2 + matchlen) == *(src + matchlen) && matchlen < remaining)
+						matchlen++;
+				}
+			}
+			else
+				matchlen = 0;
+			for(k = 1; k < QLZ_POINTERS && c > k; k++)
+			{
+				o = state->hash[hash].offset[k];
+#if QLZ_COMPRESSION_LEVEL == 3
+				if(((fast_read(o, 3) ^ fetch) & 0xffffff) == 0 && o < src - MINOFFSET)
+#elif QLZ_COMPRESSION_LEVEL == 2
+				if(*(src + matchlen) == *(o + matchlen)	&& ((fast_read(o, 3) ^ fetch) & 0xffffff) == 0 && o < src - MINOFFSET)
+#endif
+				{	
+					m = 3;
+					while(*(o + m) == *(src + m) && m < remaining)
+						m++;
+#if QLZ_COMPRESSION_LEVEL == 3
+					if ((m > matchlen) || (m == matchlen && o > offset2))
+#elif QLZ_COMPRESSION_LEVEL == 2
+					if (m > matchlen)
+#endif
+					{
+						offset2 = o;
+						matchlen = m;
+						best_k = k;
+					}
+				}
+			}
+			o = offset2;
+			state->hash[hash].offset[c & (QLZ_POINTERS - 1)] = src;
+			c++;
+			state->hash_counter[hash] = c;
+
+#if QLZ_COMPRESSION_LEVEL == 3
+			if(matchlen > 2 && src - o < 131071)
+			{
+				ui32 u;
+				size_t offset = src - o;
+
+				for(u = 1; u < matchlen; u++)
+				{	
+					hash = hashat(src + u);
+					c = state->hash_counter[hash]++;
+					state->hash[hash].offset[c & (QLZ_POINTERS - 1)] = src + u;
+				}
+
+				cword_val = (cword_val >> 1) | (1U << 31);
+				src += matchlen;
+
+				if(matchlen == 3 && offset <= 63)
+				{
+					*dst = (unsigned char)(offset << 2);
+					dst++;
+				}
+				else if (matchlen == 3 && offset <= 16383)
+				{
+					ui32 f = (ui32)((offset << 2) | 1);
+					fast_write(f, dst, 2);
+					dst += 2;
+				}		
+				else if (matchlen <= 18 && offset <= 1023)
+				{
+					ui32 f = ((matchlen - 3) << 2) | ((ui32)offset << 6) | 2;
+					fast_write(f, dst, 2);
+					dst += 2;
+				}
+
+				else if(matchlen <= 33)
+				{
+					ui32 f = ((matchlen - 2) << 2) | ((ui32)offset << 7) | 3;
+					fast_write(f, dst, 3);
+					dst += 3;
+				}
+				else
+				{
+					ui32 f = ((matchlen - 3) << 7) | ((ui32)offset << 15) | 3;
+					fast_write(f, dst, 4);
+					dst += 4;
+				}
+			}
+			else
+			{
+				*dst = *src;
+				src++;
+				dst++;
+				cword_val = (cword_val >> 1);
+			}
+#elif QLZ_COMPRESSION_LEVEL == 2
+
+			if(matchlen > 2)
+			{
+				cword_val = (cword_val >> 1) | (1U << 31);
+				src += matchlen;			
+
+				if (matchlen < 10)
+				{			
+					ui32 f = best_k | ((matchlen - 2) << 2) | (hash << 5);
+					fast_write(f, dst, 2);
+					dst += 2;
+				}
+				else
+				{
+					ui32 f = best_k | (matchlen << 16) | (hash << 5);
+					fast_write(f, dst, 3);
+					dst += 3;
+				}
+			}
+			else
+			{
+				*dst = *src;
+				src++;
+				dst++;
+				cword_val = (cword_val >> 1);
+			}
+#endif
+		}
+#endif
+	}
+	while (src <= last_byte)
+	{
+		if ((cword_val & 1) == 1)
+		{
+			fast_write((cword_val >> 1) | (1U << 31), cword_ptr, CWORD_LEN);
+			cword_ptr = dst;
+			dst += CWORD_LEN;
+			cword_val = 1U << 31;
+		}
+#if QLZ_COMPRESSION_LEVEL < 3
+		if (src <= last_byte - 3)
+		{
+#if QLZ_COMPRESSION_LEVEL == 1
+			ui32 hash, fetch;
+			fetch = fast_read(src, 3);
+			hash = hash_func(fetch);
+			state->hash[hash].offset = CAST(src - OFFSET_BASE);
+			state->hash[hash].cache = fetch;
+#elif QLZ_COMPRESSION_LEVEL == 2
+			ui32 hash;
+			unsigned char c;
+			hash = hashat(src);
+			c = state->hash_counter[hash];
+			state->hash[hash].offset[c & (QLZ_POINTERS - 1)] = src;
+			c++;
+			state->hash_counter[hash] = c;
+#endif
+		}
+#endif
+		*dst = *src;
+		src++;
+		dst++;
+		cword_val = (cword_val >> 1);
+	}
+
+	while((cword_val & 1) != 1)
+		cword_val = (cword_val >> 1);
+
+	fast_write((cword_val >> 1) | (1U << 31), cword_ptr, CWORD_LEN);
+
+	// min. size must be 9 bytes so that the qlz_size functions can take 9 bytes as argument
+	return dst - destination < 9 ? 9 : dst - destination;
+}
+
+static size_t qlz_decompress_core(const unsigned char *source, unsigned char *destination, size_t size, qlz_state_decompress *state, const unsigned char *history)
+{
+	const unsigned char *src = source + qlz_size_header((const char *)source);
+	unsigned char *dst = destination;
+	const unsigned char *last_destination_byte = destination + size - 1;
+	ui32 cword_val = 1;
+	const unsigned char *last_matchstart = last_destination_byte - UNCONDITIONAL_MATCHLEN_DECOMPRESSOR - UNCOMPRESSED_END;
+	unsigned char *last_hashed = destination - 1;
+	const unsigned char *last_source_byte = source + qlz_size_compressed((const char *)source) - 1;
+	static const ui32 bitlut[16] = {4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0};
+
+	(void) last_source_byte;
+	(void) last_hashed;
+	(void) state;
+	(void) history;
+
+	for(;;) 
+	{
+		ui32 fetch;
+
+		if (cword_val == 1)
+		{
+#ifdef QLZ_MEMORY_SAFE
+			if(src + CWORD_LEN - 1 > last_source_byte)
+				return 0;
+#endif
+			cword_val = fast_read(src, CWORD_LEN);
+			src += CWORD_LEN;
+		}
+
+#ifdef QLZ_MEMORY_SAFE
+			if(src + 4 - 1 > last_source_byte)
+				return 0;
+#endif
+
+		fetch = fast_read(src, 4);
+
+		if ((cword_val & 1) == 1)
+		{
+			ui32 matchlen;
+			const unsigned char *offset2;
+
+#if QLZ_COMPRESSION_LEVEL == 1
+			ui32 hash;
+			cword_val = cword_val >> 1;
+			hash = (fetch >> 4) & 0xfff;
+			offset2 = (const unsigned char *)(size_t)state->hash[hash].offset;
+
+			if((fetch & 0xf) != 0)
+			{
+				matchlen = (fetch & 0xf) + 2;
+				src += 2;
+			}
+			else
+			{
+				matchlen = *(src + 2);
+				src += 3;							
+			}	
+
+#elif QLZ_COMPRESSION_LEVEL == 2
+			ui32 hash;
+			unsigned char c;
+			cword_val = cword_val >> 1;
+			hash = (fetch >> 5) & 0x7ff;
+			c = (unsigned char)(fetch & 0x3);
+			offset2 = state->hash[hash].offset[c];
+
+			if((fetch & (28)) != 0)
+			{
+				matchlen = ((fetch >> 2) & 0x7) + 2;
+				src += 2;
+			}
+			else
+			{
+				matchlen = *(src + 2);
+				src += 3;							
+			}	
+
+#elif QLZ_COMPRESSION_LEVEL == 3
+			ui32 offset;
+			cword_val = cword_val >> 1;
+			if ((fetch & 3) == 0)
+			{
+				offset = (fetch & 0xff) >> 2;
+				matchlen = 3;
+				src++;
+			}
+			else if ((fetch & 2) == 0)
+			{
+				offset = (fetch & 0xffff) >> 2;
+				matchlen = 3;
+				src += 2;
+			}
+			else if ((fetch & 1) == 0)
+			{
+				offset = (fetch & 0xffff) >> 6;
+				matchlen = ((fetch >> 2) & 15) + 3;
+				src += 2;
+			}
+			else if ((fetch & 127) != 3)
+			{
+				offset = (fetch >> 7) & 0x1ffff;
+				matchlen = ((fetch >> 2) & 0x1f) + 2;
+				src += 3;
+			}
+			else
+			{
+				offset = (fetch >> 15);
+				matchlen = ((fetch >> 7) & 255) + 3;
+				src += 4;
+			}
+
+			offset2 = dst - offset;
+#endif
+	
+#ifdef QLZ_MEMORY_SAFE
+			if(offset2 < history || offset2 > dst - MINOFFSET - 1)
+				return 0;
+
+			if(matchlen > (ui32)(last_destination_byte - dst - UNCOMPRESSED_END + 1))
+				return 0;
+#endif
+
+			memcpy_up(dst, offset2, matchlen);
+			dst += matchlen;
+
+#if QLZ_COMPRESSION_LEVEL <= 2
+			update_hash_upto(state, &last_hashed, dst - matchlen);
+			last_hashed = dst - 1;
+#endif
+		}
+		else
+		{
+			if (dst < last_matchstart)
+			{
+				unsigned int n = bitlut[cword_val & 0xf];
+#ifdef X86X64
+				*(ui32 *)dst = *(ui32 *)src;
+#else
+				memcpy_up(dst, src, 4);
+#endif
+				cword_val = cword_val >> n;
+				dst += n;
+				src += n;
+#if QLZ_COMPRESSION_LEVEL <= 2
+				update_hash_upto(state, &last_hashed, dst - 3);		
+#endif
+			}
+			else
+			{			
+				while(dst <= last_destination_byte)
+				{
+					if (cword_val == 1)
+					{
+						src += CWORD_LEN;
+						cword_val = 1U << 31;
+					}
+#ifdef QLZ_MEMORY_SAFE
+					if(src >= last_source_byte + 1)
+						return 0;
+#endif
+					*dst = *src;
+					dst++;
+					src++;
+					cword_val = cword_val >> 1;
+				}
+
+#if QLZ_COMPRESSION_LEVEL <= 2
+				update_hash_upto(state, &last_hashed, last_destination_byte - 3); // todo, use constant
+#endif
+				return size;
+			}
+
+		}
+	}
+}
+
+size_t qlz_compress(const void *source, char *destination, size_t size, qlz_state_compress *state)
+{
+	size_t r;
+	ui32 compressed;
+	size_t base;
+
+	if(size == 0 || size > 0xffffffff - 400)
+		return 0;
+
+	if(size < 216)
+		base = 3;
+	else
+		base = 9;
+
+#if QLZ_STREAMING_BUFFER > 0
+	if (state->stream_counter + size - 1 >= QLZ_STREAMING_BUFFER)
+#endif
+	{
+		reset_table_compress(state);
+		r = base + qlz_compress_core((const unsigned char *)source, (unsigned char*)destination + base, size, state);
+#if QLZ_STREAMING_BUFFER > 0
+		reset_table_compress(state);
+#endif
+		if(r == base)
+		{
+			memcpy(destination + base, source, size);
+			r = size + base;
+			compressed = 0;
+		}
+		else
+		{
+			compressed = 1;
+		}
+		state->stream_counter = 0;
+	}
+#if QLZ_STREAMING_BUFFER > 0
+	else
+	{
+		unsigned char *src = state->stream_buffer + state->stream_counter;
+
+		memcpy(src, source, size);
+		r = base + qlz_compress_core(src, (unsigned char*)destination + base, size, state);
+
+ 		if(r == base)
+		{
+			memcpy(destination + base, src, size);
+			r = size + base;
+			compressed = 0;
+			reset_table_compress(state);
+		}
+		else
+		{
+			compressed = 1;
+		}
+		state->stream_counter += size;
+	}
+#endif
+	if(base == 3)
+	{
+		*destination = (unsigned char)(0 | compressed);
+		*(destination + 1) = (unsigned char)r;
+		*(destination + 2) = (unsigned char)size;
+	}
+	else
+	{
+		*destination = (unsigned char)(2 | compressed);
+		fast_write((ui32)r, destination + 1, 4);
+		fast_write((ui32)size, destination + 5, 4);
+	}
+	
+	*destination |= (QLZ_COMPRESSION_LEVEL << 2);
+	*destination |= (1 << 6);
+	*destination |= ((QLZ_STREAMING_BUFFER == 0 ? 0 : (QLZ_STREAMING_BUFFER == 100000 ? 1 : (QLZ_STREAMING_BUFFER == 1000000 ? 2 : 3))) << 4);
+
+// 76543210
+// 01SSLLHC
+
+	return r;
+}
+
+size_t qlz_decompress(const char *source, void *destination, qlz_state_decompress *state)
+{
+	size_t dsiz = qlz_size_decompressed(source);
+	size_t csiz = qlz_size_compressed(source);
+
+#if QLZ_STREAMING_BUFFER > 0
+	if (state->stream_counter + qlz_size_decompressed(source) - 1 >= QLZ_STREAMING_BUFFER) 
+#endif
+	{
+		if((*source & 1) == 1)
+		{
+			reset_table_decompress(state);
+			dsiz = qlz_decompress_core((const unsigned char *)source, (unsigned char *)destination, dsiz, state, (const unsigned char *)destination);
+		}
+		else
+		{
+			if(csiz != dsiz + qlz_size_header(source))
+				return 0;
+
+			memcpy(destination, source + qlz_size_header(source), dsiz);
+		}
+		state->stream_counter = 0;
+		reset_table_decompress(state);
+	}
+#if QLZ_STREAMING_BUFFER > 0
+	else
+	{
+		unsigned char *dst = state->stream_buffer + state->stream_counter;
+		if((*source & 1) == 1)
+		{
+			dsiz = qlz_decompress_core((const unsigned char *)source, dst, dsiz, state, (const unsigned char *)state->stream_buffer);
+		}
+		else
+		{
+		//	if(csiz != dsiz + qlz_size_header(source))
+		//		return 0;
+
+			memcpy(dst, source + qlz_size_header(source), dsiz);
+			reset_table_decompress(state);
+		}
+		memcpy(destination, dst, dsiz);
+		state->stream_counter += dsiz;
+	}
+#endif
+	return dsiz;
+}
+
